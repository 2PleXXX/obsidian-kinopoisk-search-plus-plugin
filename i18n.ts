/**
 * i18n.ts
 *
 * Internationalization system for Obsidian Kinopoisk plugin
 */

export type SupportedLanguage = "ru" | "en";

export interface Translations {
	common: {
		ok: string;
		cancel: string;
		save: string;
		loading: string;
		error: string;
		success: string;
	};

	modals: {
		searchTitle: string;
		searchPlaceholder: string;
		searchButton: string;
		searching: string;
		enterMovieName: string;
		needApiToken: string;
		loadingMovieInfo: string;
		preparingImages: string;
		movieInfoLoaded: string;
		errorMovieData: string;
		errorUnexpected: string;
		errorGettingDetails: string;
		// –ù–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ suggest_modal.ts
		posterPlaceholderEmoji: string;
		posterTooltipGeoblock: string;
		posterTooltipMissing: string;
		posterTooltipEmptyLink: string;
		posterTooltipInvalidLink: string;
	};

	suggesters: {
		fileListError: string;
		folderListError: string;
	};

	validation: {
		invalidApiToken: string;
		invalidSearchQuery: string;
		invalidMovieId: string;
		invalidPaginationParams: string;
	};

	provider: {
		tokenRequired: string;
		enterMovieTitle: string;
		nothingFound: string;
		invalidMovieId: string;
		tokenRequiredForMovie: string;
		movieInfoError: string;
		tryChangeQuery: string;
	};

	errorHandler: {
		badRequest: string;
		unauthorized: string;
		forbidden: string;
		notFound: string;
		tooManyRequests: string;
		internalServerError: string;
		badGateway: string;
		serviceUnavailable: string;
		gatewayTimeout: string;
		networkError: string;
		unknownStatusError: string;
		unexpectedError: string;
	};

	images: {
		poster: string;
		cover: string;
		logo: string;
		noImagesToDownload: string;
		downloading: string;
		downloadingPoster: string;
		downloadingCover: string;
		downloadingLogo: string;
		completed: string;
		completedAllDownloaded: string;
		completedAlreadyLocal: string;
		completedWithErrors: string;
		invalidUrl: string;
		imageNotFound: string;
		accessForbidden: string;
		serverError: string;
		httpError: string;
		downloadFailed: string;
		timeout: string;
		downloadedWithErrors: string;
		imagesUnavailable: string;
		processingError: string;
		posterUnavailable: string;
		coverUnavailable: string;
		logoUnavailable: string;
		downloadError: string;
	};

	utils: {
		unknownMovie: string;
		copyPrefix: string;
		templateNotFound: string;
		templateReadError: string;
	};

	settings: {
		apiToken: string;
		apiTokenDesc: string;
		getApiToken: string;
		checkToken: string;
		checking: string;
		tokenValid: string;
		tokenInvalid: string;
		tokenError: string;
		enterToken: string;
		imagesHeading: string;
		saveImagesLocally: string;
		saveImagesLocallyDesc: string;
		imagesFolder: string;
		imagesFolderDesc: string;
		imagesFolderPlaceholder: string;
		savePosterImage: string;
		savePosterImageDesc: string;
		saveCoverImage: string;
		saveCoverImageDesc: string;
		saveLogoImage: string;
		saveLogoImageDesc: string;
		moviesHeading: string;
		movieFileName: string;
		movieFileNameDesc: string;
		movieFileNamePlaceholder: string;
		movieFileLocation: string;
		movieFileLocationDesc: string;
		movieFileLocationPlaceholder: string;
		movieTemplateFile: string;
		movieTemplateFileDesc: string;
		movieTemplateFilePlaceholder: string;
		exampleTemplate: string;
		seriesHeading: string;
		seriesFileName: string;
		seriesFileNameDesc: string;
		seriesFileNamePlaceholder: string;
		seriesFileLocation: string;
		seriesFileLocationDesc: string;
		seriesFileLocationPlaceholder: string;
		seriesTemplateFile: string;
		seriesTemplateFileDesc: string;
		seriesTemplateFilePlaceholder: string;
		languageHeading: string;
		language: string;
		languageDesc: string;
	};
}

const ru: Translations = {
	common: {
		ok: "–û–ö",
		cancel: "–û—Ç–º–µ–Ω–∞",
		save: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
		loading: "–ó–∞–≥—Ä—É–∑–∫–∞...",
		error: "–û—à–∏–±–∫–∞",
		success: "–£—Å–ø–µ—à–Ω–æ",
	},

	modals: {
		searchTitle: "üçø –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞",
		searchPlaceholder: "–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É",
		searchButton: "–ù–∞–π—Ç–∏",
		searching: "–ü–æ–∏—Å–∫...",
		enterMovieName: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞",
		needApiToken: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å API —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞–≥–∏–Ω–∞",
		loadingMovieInfo: "–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ...",
		preparingImages: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...",
		movieInfoLoaded: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!",
		errorMovieData: "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞",
		errorUnexpected: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞",
		errorGettingDetails:
			"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ",
		// –ù–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ suggest_modal.ts
		posterPlaceholderEmoji: "üìΩÔ∏è",
		posterTooltipGeoblock: "–ü–æ—Å—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)",
		posterTooltipMissing: "–ü–æ—Å—Ç–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
		posterTooltipEmptyLink: "–ü—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç–µ—Ä",
		posterTooltipInvalidLink: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç–µ—Ä",
	},

	suggesters: {
		fileListError: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:",
		folderListError: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫:",
	},

	validation: {
		invalidApiToken: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API —Ç–æ–∫–µ–Ω",
		invalidSearchQuery: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
		invalidMovieId: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π ID —Ñ–∏–ª—å–º–∞",
		invalidPaginationParams: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏",
	},

	provider: {
		tokenRequired:
			"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞–≥–∏–Ω–∞",
		enterMovieTitle: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞",
		nothingFound: '–ü–æ –∑–∞–ø—Ä–æ—Å—É "{query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.',
		invalidMovieId: "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ñ–∏–ª—å–º–∞",
		tokenRequiredForMovie: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API —Ç–æ–∫–µ–Ω",
		movieInfoError: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ",
		tryChangeQuery: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.",
	},

	errorHandler: {
		badRequest: "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
		unauthorized:
			"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Ç–æ–∫–µ–Ω —É–∫–∞–∑–∞–Ω –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.",
		forbidden: "–ü—Ä–µ–≤—ã—à–µ–Ω —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
		notFound: "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.",
		tooManyRequests:
			"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
		internalServerError:
			"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
		badGateway: "–°–µ—Ä–≤–µ—Ä –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (502 Bad Gateway).",
		serviceUnavailable:
			"–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
		gatewayTimeout:
			"–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (504 Gateway Timeout).",
		networkError:
			"–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.",
		unknownStatusError:
			"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É (–∫–æ–¥ {status}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
		unexpectedError:
			"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
	},

	images: {
		poster: "–ø–æ—Å—Ç–µ—Ä–∞",
		cover: "–æ–±–ª–æ–∂–∫–∏",
		logo: "–ª–æ–≥–æ—Ç–∏–ø–∞",
		noImagesToDownload: "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
		downloading: "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ",
		downloadingPoster: "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–µ—Ä–∞...",
		downloadingCover: "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏...",
		downloadingLogo: "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞...",
		completed: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ!",
		completedAllDownloaded: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫–∞—á–∞–Ω—ã",
		completedAlreadyLocal: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∂–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ",
		completedWithErrors:
			"–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—à–Ω–æ: {successful}, –Ω–µ —É–¥–∞–ª–æ—Å—å: {failed}",
		invalidUrl:
			"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL: {url}. –û–∂–∏–¥–∞–ª—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π HTTP/HTTPS URL.",
		imageNotFound: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (404): {url}",
		accessForbidden: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403): {url}",
		serverError: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ({status}): {url}",
		httpError: "HTTP {status}: {url}",
		downloadFailed: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {url}",
		timeout: "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ {timeout}–º—Å",
		downloadedWithErrors:
			"–°–∫–∞—á–∞–Ω–æ: {successful}/{total} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ.",
		imagesUnavailable:
			"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏.",
		processingError: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
		posterUnavailable:
			"–ü–æ—Å—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ)",
		coverUnavailable:
			"–û–±–ª–æ–∂–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ)",
		logoUnavailable:
			"–õ–æ–≥–æ—Ç–∏–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ)",
		downloadError: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å",
	},

	utils: {
		unknownMovie: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª—å–º",
		copyPrefix: "–ö–æ–ø–∏—è",
		templateNotFound: "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω",
		templateReadError: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞",
	},

	settings: {
		apiToken: "API –¢–æ–∫–µ–Ω",
		apiTokenDesc:
			"–í–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å API —Ç–æ–∫–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.",
		getApiToken: "–ü–æ–ª—É—á–∏—Ç—å API –¢–æ–∫–µ–Ω",
		checkToken: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω",
		checking: "–ü—Ä–æ–≤–µ—Ä—è–µ–º...",
		tokenValid: "‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!",
		tokenInvalid: "‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞.",
		tokenError: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
		enterToken: "–í–≤–µ–¥–∏—Ç–µ API —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
		imagesHeading: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
		saveImagesLocally: "–°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ",
		saveImagesLocallyDesc:
			"–°–∫–∞—á–∏–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–µ–±-—Å—Å—ã–ª–æ–∫.",
		imagesFolder: "–ü–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
		imagesFolderDesc: "–ü–∞–ø–∫–∞, –≥–¥–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å–∫–∞—á–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
		imagesFolderPlaceholder: "–ù–∞–ø—Ä–∏–º–µ—Ä: attachments/kinopoisk",
		savePosterImage: "–°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ—Å—Ç–µ—Ä—ã",
		savePosterImageDesc: "–°–∫–∞—á–∏–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ—Å—Ç–µ—Ä—ã —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤.",
		saveCoverImage: "–°–æ—Ö—Ä–∞–Ω—è—Ç—å –æ–±–ª–æ–∂–∫–∏",
		saveCoverImageDesc:
			"–°–∫–∞—á–∏–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ–±–ª–æ–∂–∫–∏/–±—ç–∫–¥—Ä–æ–ø—ã —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤.",
		saveLogoImage: "–°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–æ–≥–æ—Ç–∏–ø—ã",
		saveLogoImageDesc: "–°–∫–∞—á–∏–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–æ–≥–æ—Ç–∏–ø—ã —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤.",
		moviesHeading: "–§–∏–ª—å–º—ã",
		movieFileName: "–ò–º—è —Ñ–∞–π–ª–∞ —Ñ–∏–ª—å–º–∞",
		movieFileNameDesc: "–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤.",
		movieFileNamePlaceholder: "–ù–∞–ø—Ä–∏–º–µ—Ä: {{nameForFile}} ({{year}})",
		movieFileLocation: "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ñ–∏–ª—å–º–æ–≤",
		movieFileLocationDesc: "–ù–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ –æ —Ñ–∏–ª—å–º–∞—Ö –±—É–¥—É—Ç —Ä–∞–∑–º–µ—â–µ–Ω—ã –∑–¥–µ—Å—å.",
		movieFileLocationPlaceholder: "–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–∞–ø–∫–∞1/–ø–∞–ø–∫–∞2",
		movieTemplateFile: "–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤",
		movieTemplateFileDesc: "–§–∞–π–ª—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∫–∞–∫ —à–∞–±–ª–æ–Ω—ã.",
		movieTemplateFilePlaceholder: "–ù–∞–ø—Ä–∏–º–µ—Ä: templates/template-file",
		exampleTemplate: "–ü—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞",
		seriesHeading: "–°–µ—Ä–∏–∞–ª—ã",
		seriesFileName: "–ò–º—è —Ñ–∞–π–ª–∞ —Å–µ—Ä–∏–∞–ª–∞",
		seriesFileNameDesc: "–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–µ—Ä–∏–∞–ª–æ–≤.",
		seriesFileNamePlaceholder: "–ù–∞–ø—Ä–∏–º–µ—Ä: {{nameForFile}} ({{year}})",
		seriesFileLocation: "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä–∏–∞–ª–æ–≤",
		seriesFileLocationDesc:
			"–ù–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ –æ —Å–µ—Ä–∏–∞–ª–∞—Ö –±—É–¥—É—Ç —Ä–∞–∑–º–µ—â–µ–Ω—ã –∑–¥–µ—Å—å.",
		seriesFileLocationPlaceholder: "–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–∞–ø–∫–∞1/–ø–∞–ø–∫–∞2",
		seriesTemplateFile: "–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Å–µ—Ä–∏–∞–ª–æ–≤",
		seriesTemplateFileDesc: "–§–∞–π–ª—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∫–∞–∫ —à–∞–±–ª–æ–Ω—ã.",
		seriesTemplateFilePlaceholder: "–ù–∞–ø—Ä–∏–º–µ—Ä: templates/template-file",
		languageHeading: "–Ø–∑—ã–∫",
		language: "–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
		languageDesc: "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–ª–∞–≥–∏–Ω–∞.",
	},
};

const en: Translations = {
	common: {
		ok: "OK",
		cancel: "Cancel",
		save: "Save",
		loading: "Loading...",
		error: "Error",
		success: "Success",
	},

	modals: {
		searchTitle: "üçø Search movie or TV show",
		searchPlaceholder: "Search by keyword",
		searchButton: "Search",
		searching: "Searching...",
		enterMovieName: "Enter movie or TV show name to search",
		needApiToken: "API token must be specified in plugin settings",
		loadingMovieInfo: "Loading movie information...",
		preparingImages: "Preparing to download images...",
		movieInfoLoaded: "Movie information loaded!",
		errorMovieData: "Error: invalid movie data",
		errorUnexpected: "An unexpected error occurred",
		errorGettingDetails:
			"An unexpected error occurred while getting movie information",
		// –ù–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ suggest_modal.ts
		posterPlaceholderEmoji: "üìΩÔ∏è",
		posterTooltipGeoblock: "Poster unavailable (possibly geo-blocked)",
		posterTooltipMissing: "Poster missing",
		posterTooltipEmptyLink: "Empty poster link",
		posterTooltipInvalidLink: "Invalid poster link",
	},

	suggesters: {
		fileListError: "Error getting file list:",
		folderListError: "Error getting folder list:",
	},

	validation: {
		invalidApiToken: "Invalid API token",
		invalidSearchQuery: "Invalid search query",
		invalidMovieId: "Invalid movie ID",
		invalidPaginationParams: "Invalid pagination parameters",
	},

	provider: {
		tokenRequired: "Valid API token must be specified in plugin settings",
		enterMovieTitle: "Enter movie or TV show title to search",
		nothingFound: 'Nothing found for query "{query}".',
		invalidMovieId: "Invalid movie ID",
		tokenRequiredForMovie: "Valid API token must be specified",
		movieInfoError: "Failed to get movie information",
		tryChangeQuery: "Try changing the search query.",
	},

	errorHandler: {
		badRequest: "Bad request. Please check the entered data.",
		unauthorized:
			"Unauthorized access. Make sure the API token is specified and valid.",
		forbidden: "Daily limit exceeded. Please wait and try again.",
		notFound: "Data not found. Try changing the search query.",
		tooManyRequests: "Too many requests. Please wait a bit and try again.",
		internalServerError:
			"Kinopoisk server internal error. Try again later.",
		badGateway:
			"Kinopoisk server temporarily unavailable (502 Bad Gateway).",
		serviceUnavailable: "Service temporarily unavailable. Try again later.",
		gatewayTimeout:
			"Server not responding. Timeout exceeded (504 Gateway Timeout).",
		networkError: "Internet connection problems. Check your connection.",
		unknownStatusError:
			"An error occurred when requesting the server (code {status}). Try again later.",
		unexpectedError:
			"An unexpected error occurred during the request. Try again later.",
	},

	images: {
		poster: "poster",
		cover: "cover",
		logo: "logo",
		noImagesToDownload: "No images to download",
		downloading: "Downloading",
		downloadingPoster: "Downloading poster...",
		downloadingCover: "Downloading cover...",
		downloadingLogo: "Downloading logo...",
		completed: "Completed!",
		completedAllDownloaded: "Completed! All images downloaded",
		completedAlreadyLocal: "Completed! Images are already local",
		completedWithErrors:
			"Completed! Successful: {successful}, failed: {failed}",
		invalidUrl: "Invalid URL format: {url}. Expected valid HTTP/HTTPS URL.",
		imageNotFound: "Image not found (404): {url}",
		accessForbidden: "Access forbidden (403): {url}",
		serverError: "Server error ({status}): {url}",
		httpError: "HTTP {status}: {url}",
		downloadFailed: "Failed to download image: {url}",
		timeout: "Timeout after {timeout}ms",
		downloadedWithErrors:
			"Downloaded: {successful}/{total} images. Some are unavailable in your region.",
		imagesUnavailable:
			"Images are unavailable in your region. Using original links.",
		processingError: "Error processing images",
		posterUnavailable:
			"Poster unavailable (possibly blocked in your region)",
		coverUnavailable: "Cover unavailable (possibly blocked in your region)",
		logoUnavailable: "Logo unavailable (possibly blocked in your region)",
		downloadError: "Failed to download",
	},

	utils: {
		unknownMovie: "Unknown Movie",
		copyPrefix: "Copy",
		templateNotFound: "Template not found",
		templateReadError: "Failed to read template file",
	},

	settings: {
		apiToken: "API Token",
		apiTokenDesc:
			"You need to get API token to use this plugin. Choose free plan and follow steps.",
		getApiToken: "Get API Token",
		checkToken: "Check Token",
		checking: "Checking...",
		tokenValid: "‚úÖ Token is valid!",
		tokenInvalid: "‚ùå Token is invalid. Please check your token.",
		tokenError: "‚ùå Error checking token. Please try again later.",
		enterToken: "Enter API token to check",
		imagesHeading: "Images",
		saveImagesLocally: "Save images locally",
		saveImagesLocallyDesc:
			"Download and save images to local folder instead of using web URLs.",
		imagesFolder: "Images folder",
		imagesFolderDesc: "Folder where downloaded images will be saved.",
		imagesFolderPlaceholder: "Example: attachments/kinopoisk",
		savePosterImage: "Save poster images",
		savePosterImageDesc: "Download and save movie/series poster images.",
		saveCoverImage: "Save cover/backdrop images",
		saveCoverImageDesc:
			"Download and save movie/series cover/backdrop images.",
		saveLogoImage: "Save logo images",
		saveLogoImageDesc: "Download and save movie/series logo images.",
		moviesHeading: "Movies",
		movieFileName: "Movie file name",
		movieFileNameDesc: "Enter the movie file name format.",
		movieFileNamePlaceholder: "Example: {{nameForFile}} ({{year}})",
		movieFileLocation: "Movie file location",
		movieFileLocationDesc: "New movie notes will be placed here.",
		movieFileLocationPlaceholder: "Example: folder1/folder2",
		movieTemplateFile: "Movie template file",
		movieTemplateFileDesc: "Files will be available as templates.",
		movieTemplateFilePlaceholder: "Example: templates/template-file",
		exampleTemplate: "Example Template",
		seriesHeading: "TV series",
		seriesFileName: "TV series file name",
		seriesFileNameDesc: "Enter the TV series file name format.",
		seriesFileNamePlaceholder: "Example: {{nameForFile}} ({{year}})",
		seriesFileLocation: "TV series file location",
		seriesFileLocationDesc: "New TV series notes will be placed here.",
		seriesFileLocationPlaceholder: "Example: folder1/folder2",
		seriesTemplateFile: "TV series template file",
		seriesTemplateFileDesc: "Files will be available as templates.",
		seriesTemplateFilePlaceholder: "Example: templates/template-file",
		languageHeading: "Language",
		language: "Interface language",
		languageDesc: "Select the plugin interface language.",
	},
};

const translations: Record<SupportedLanguage, Translations> = {
	ru,
	en,
};

let currentLanguage: SupportedLanguage = "en";

/**
 * Initialize language based on system locale or user preference
 * Call this function when the plugin loads
 */
export function initializeLanguage(userPreference?: SupportedLanguage): void {
	if (userPreference) {
		currentLanguage = userPreference;
		return;
	}

	// Try to detect system language
	const systemLang = navigator.language || navigator.languages?.[0];
	if (systemLang?.startsWith("ru")) {
		currentLanguage = "ru";
	} else {
		currentLanguage = "en";
	}
}

/**
 * Set the current language
 */
export function setLanguage(language: SupportedLanguage): void {
	currentLanguage = language;
}

/**
 * Get the current language
 */
export function getCurrentLanguage(): SupportedLanguage {
	return currentLanguage;
}

/**
 * Get the list of supported languages
 */
export function getSupportedLanguages(): Array<{
	code: SupportedLanguage;
	name: string;
}> {
	return [
		{ code: "ru", name: "–†—É—Å—Å–∫–∏–π" },
		{ code: "en", name: "English" },
	];
}

/**
 * Get translation by key
 * Usage: t('settings.apiToken') or t('common.ok')
 */
export function t(key: string): string {
	const keys = key.split(".");
	let value: unknown = translations[currentLanguage];

	for (const k of keys) {
		if (value && typeof value === "object" && k in value) {
			value = (value as Record<string, unknown>)[k];
		} else {
			console.warn(`Translation key not found: ${key}`);
			return key;
		}
	}

	return typeof value === "string" ? value : key;
}

/**
 * Get translation by key with parameter substitution
 * Usage: tWithParams('images.completedWithErrors', { successful: 2, failed: 1 })
 */
export function tWithParams(
	key: string,
	params: Record<string, string | number>
): string {
	let translation = t(key);

	for (const [paramKey, paramValue] of Object.entries(params)) {
		translation = translation.replace(
			new RegExp(`\\{${paramKey}\\}`, "g"),
			String(paramValue)
		);
	}

	return translation;
}
